#!/usr/bin/env python
PACKAGE = "pses_control_test"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("debug_output", bool_t, 0, "Show debug output", False)
gen.add("ctrl_left_lane", bool_t, 0, "Drive on left side of road", False)
gen.add("ctrl_velocity", double_t, 0, "Current robot speed", 0.2, 0, 2)
gen.add("motor_ctrl", int_t, 0, "Number of MPC timesteps", 0, 0, 1000)

gen.add("mpc_update_rate", double_t, 0, "Time between MPC calculations", 0.4, 0.0, 5.0)
gen.add("mpc_deadtime_comp", bool_t, 0, "Use deadtime compensation for computational delay compensation", False)
gen.add("mpc_timestep", double_t, 0, "MPC timestep in seconds", 0.1, 0.01, 2)
gen.add("mpc_number_timesteps", int_t, 0, "Number of MPC timesteps", 20, 1, 60)
gen.add("mpc_weight_state", double_t, 0, "MPC weights for state deviation", 10, 0.01, 100)
gen.add("mpc_weight_ctrl", double_t, 0, "MPC weights for control", 0.1, 0.01, 100)

gen.add("detection_end_offset", int_t, 0, "y-offset until which to scan", 200, 0, 500)

gen.add("direct_trajectory", bool_t, 0, "Use direct trajectory to first waypoint", True)
gen.add("fill_pink_lane", bool_t, 0, "Fill in empty spaces between pink lane segments", False)

exit(gen.generate(PACKAGE, "pses_control_test", "Params"))